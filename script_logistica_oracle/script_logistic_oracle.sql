-- Create schema (in Oracle, this is equivalent to a user, so normally you use the user itself)
-- In this example, we will directly use the tables

-- Create table for VehicleLoadType
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE VehicleLoadType CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
      RAISE;
    END IF;
END;
/

CREATE TABLE VehicleLoadType (
  id_vehicle_load_type NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  description VARCHAR2(50) NOT NULL,
  recommended_route VARCHAR2(10) CHECK (recommended_route IN ('short', 'long')) NOT NULL
);

-- Drop and recreate the VehicleLoad table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE VehicleLoad CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
      RAISE;
    END IF;
END;
/

CREATE TABLE VehicleLoad (
  id_vehicle_load NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_vehicle_type NUMBER NOT NULL,
  brand VARCHAR2(30) NOT NULL,
  vehicle_description VARCHAR2(255) NOT NULL,
  plate CHAR(8) NOT NULL,
  chassis VARCHAR2(17) NOT NULL,
  model_year NUMBER(4) DEFAULT NULL,
  manufacture_year NUMBER(4) DEFAULT NULL,
  load_capacity NUMBER(5,2) NOT NULL,
  CONSTRAINT fk_VehicleType1 FOREIGN KEY (id_vehicle_type)
    REFERENCES VehicleLoadType(id_vehicle_load_type)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

CREATE INDEX fk_VehicleType1_idx ON VehicleLoad (id_vehicle_type);

-- Drop and recreate the Driver table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE Driver CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
      RAISE;
    END IF;
END;
/

CREATE TABLE Driver (
  id_driver NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR2(100) NOT NULL,
  cpf CHAR(11) NOT NULL,
  driver_type VARCHAR2(10) CHECK (driver_type IN ('internal', 'contracted')) NOT NULL,
  phone VARCHAR2(15),
  email VARCHAR2(100)
);

-- Drop and recreate the Location table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE Location CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
      RAISE;
    END IF;
END;
/

CREATE TABLE Location (
  id_location NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_location_type NUMBER NOT NULL,
  location_type VARCHAR2(10) CHECK (location_type IN ('origin', 'destination')) NOT NULL,
  location_name VARCHAR2(100) NOT NULL,
  address VARCHAR2(255) NOT NULL,
  storage_capacity NUMBER(8,2),
  last_inspection DATE,
  observation VARCHAR2(255)
);

-- Drop and recreate the ResponsiblePerson table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ResponsiblePerson CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
      RAISE;
    END IF;
END;
/

CREATE TABLE ResponsiblePerson (
  id_responsible NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_location NUMBER NOT NULL,
  name VARCHAR2(100) NOT NULL,
  phone VARCHAR2(15),
  email VARCHAR2(100),
  CONSTRAINT fk_Location_1 FOREIGN KEY (id_location)
    REFERENCES Location(id_location)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

CREATE INDEX fk_Location_1_idx ON ResponsiblePerson (id_location);

-- Drop and recreate the GrainType table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE GrainType CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
      RAISE;
    END IF;
END;
/

CREATE TABLE GrainType (
  id_grain_type NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR2(100) NOT NULL,
  ideal_humidity NUMBER(3) NOT NULL,
  observations VARCHAR2(255)
);

-- Drop and recreate the Load table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE Load CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

CREATE TABLE Load (
  id_load NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  initial_weight_total FLOAT NOT NULL,
  final_weight_total FLOAT
);

-- Drop and recreate the LoadGrainType table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE LoadGrainType CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

CREATE TABLE LoadGrainType (
  id_load_grain_type NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_grain_type NUMBER NOT NULL,
  id_load NUMBER NOT NULL,
  grain_humidity NUMBER NOT NULL,
  initial_weight FLOAT NOT NULL,
  final_weight FLOAT,
  CONSTRAINT fk_GrainType1 FOREIGN KEY (id_grain_type)
    REFERENCES GrainType(id_grain_type)
    ON DELETE NO ACTION,
  CONSTRAINT fk_Load1 FOREIGN KEY (id_load)
    REFERENCES Load(id_load)
    ON DELETE NO ACTION
);

CREATE INDEX fk_GrainType1_idx ON LoadGrainType (id_grain_type);
CREATE INDEX fk_Load1_idx ON LoadGrainType (id_load);

-- Drop and recreate the WeatherForecast table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE WeatherForecast CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

CREATE TABLE WeatherForecast (
  id_weather_forecast NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  date_time TIMESTAMP NOT NULL,
  region VARCHAR2(100) NOT NULL,
  temperature NUMBER(3) NOT NULL, -- accepts negative values
  humidity NUMBER(3) NOT NULL -- percentage (0 to 100)
);

-- Drop and recreate the Movement table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE Movement CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

CREATE TABLE Movement (
  id_movement NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_vehicle NUMBER NOT NULL,
  id_driver NUMBER NOT NULL,
  id_load NUMBER NOT NULL,
  id_origin_location NUMBER NOT NULL,
  id_destination_location NUMBER NOT NULL,
  trip_status VARCHAR2(20) CHECK (trip_status IN ('completed', 'in_transit', 'delayed')) NOT NULL,
  start_date_time TIMESTAMP NOT NULL,
  end_date_time TIMESTAMP,
  observations VARCHAR2(255),

  CONSTRAINT fk_Driver2 FOREIGN KEY (id_driver)
    REFERENCES Driver(id_driver)
    ON DELETE NO ACTION,

  CONSTRAINT fk_Vehicle1 FOREIGN KEY (id_vehicle)
    REFERENCES VehicleLoad(id_vehicle_load)
    ON DELETE NO ACTION,

  CONSTRAINT fk_Load3 FOREIGN KEY (id_load)
    REFERENCES Load(id_load)
    ON DELETE NO ACTION,

  CONSTRAINT fk_Location_3 FOREIGN KEY (id_origin_location)
    REFERENCES Location(id_location)
    ON DELETE NO ACTION,

  CONSTRAINT fk_Location_4 FOREIGN KEY (id_destination_location)
    REFERENCES Location(id_location)
    ON DELETE NO ACTION
);

-- Auxiliary indexes (optional for performance)
CREATE INDEX fk_Driver2_idx ON Movement (id_driver);
CREATE INDEX fk_Vehicle1_idx ON Movement (id_vehicle);
CREATE INDEX fk_Load3_idx ON Movement (id_load);
CREATE INDEX fk_Location_3_idx ON Movement (id_origin_location);
CREATE INDEX fk_Location_4_idx ON Movement (id_destination_location);

-- Drop and recreate the MovementForecast table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE MovementForecast CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

CREATE TABLE MovementForecast (
  id_movement_forecast NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_movement NUMBER NOT NULL,
  id_weather_forecast NUMBER NOT NULL,

  CONSTRAINT fk_Movement FOREIGN KEY (id_movement)
    REFERENCES Movement(id_movement)
    ON DELETE NO ACTION,

  CONSTRAINT fk_WeatherForecast FOREIGN KEY (id_weather_forecast)
    REFERENCES WeatherForecast(id_weather_forecast)
    ON DELETE NO ACTION
);

-- Auxiliary indexes (optional for performance)
CREATE INDEX fk_Movement_idx ON MovementForecast (id_movement);
CREATE INDEX fk_WeatherForecast_idx ON MovementForecast (id_weather_forecast);

-- Drop and recreate the StockHistory table
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE StockHistory CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -942 THEN RAISE; END IF;
END;
/

CREATE TABLE StockHistory (
  id_stock_history NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_location NUMBER NOT NULL,
  id_load NUMBER NOT NULL,
  id_movement NUMBER NOT NULL,
  update_date TIMESTAMP NOT NULL,
  initial_quantity NUMBER(10,2) NOT NULL,
  current_quantity NUMBER(10,2) NOT NULL,
  quantity_in NUMBER(10,2) NOT NULL,
  quantity_out NUMBER(10,2),

  CONSTRAINT fk_Load FOREIGN KEY (id_load)
    REFERENCES Load(id_load)
    ON DELETE NO ACTION,

  CONSTRAINT fk_Movement FOREIGN KEY (id_movement)
    REFERENCES Movement(id_movement)
    ON DELETE NO ACTION,

  CONSTRAINT fk_Location FOREIGN KEY (id_location)
    REFERENCES Location(id_location)
    ON DELETE NO ACTION
);

-- Auxiliary indexes (optional for performance)
CREATE INDEX fk_Load_idx ON StockHistory (id_load);
CREATE INDEX fk_Movement_idx ON StockHistory (id_movement);
CREATE INDEX fk_Location_idx ON StockHistory (id_location);
