import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from datetime import datetime

from manager.cargo_vehicle import CargoVehicle
from manager.cargo_vehicle_type import CargoVehicleType


class CargoVehicleCRUD:

    """
    Classe respons√°vel pelas opera√ß√µes CRUD (Criar, Ler, Atualizar, Excluir) em ve√≠culos de carga.

    Atributos:
        vehicles (list): Lista que armazena os ve√≠culos cadastrados no sistema.
    """

    def __init__(self):
        """
        Inicializa a classe CargoVehicleCRUD com uma lista vazia de ve√≠culos.
        """
        self.vehicles = []

    def create_vehicle(self, vehicle: CargoVehicle):
        """
        Cria um novo ve√≠culo e o adiciona √† lista de ve√≠culos.

        Par√¢metros:
            vehicle (CargoVehicle): Inst√¢ncia da classe CargoVehicle contendo as informa√ß√µes do ve√≠culo a ser criado.
        
        Exemplo:
            v = CargoVehicle(vehicle_id=1, vehicle_type_id=100, brand="Volkswagen", ...)
            manager.create_vehicle(v)
        """
        self.vehicles.append(vehicle)
        print(f"‚úÖ Ve√≠culo com ID {vehicle.vehicle_id} criado com sucesso.")

    def read_vehicles(self):
        """
        Exibe todos os ve√≠culos cadastrados no sistema.

        Se n√£o houver ve√≠culos cadastrados, exibe uma mensagem informando que n√£o h√° ve√≠culos.

        Exemplo:
            manager.read_vehicles()
        """
        if not self.vehicles:
            print("üö´ Nenhum ve√≠culo cadastrado.")
            return
        for vehicle in self.vehicles:
            print(vehicle)

    def update_vehicle(self, vehicle_id: int, **kwargs):
        """
        Atualiza os atributos de um ve√≠culo existente com base no ID.

        Par√¢metros:
            vehicle_id (int): ID do ve√≠culo a ser atualizado.
            **kwargs: Par√¢metros chave-valor que indicam o atributo a ser atualizado e o novo valor.
        
        Exemplo:
            manager.update_vehicle(1, brand="Iveco", cargo_capacity=10.0)
        """
        for vehicle in self.vehicles:
            if vehicle.vehicle_id == vehicle_id:
                for key, value in kwargs.items():
                    if hasattr(vehicle, key):
                        setattr(vehicle, key, value)
                        print(f"üîÑ Atributo '{key}' atualizado para '{value}' no ve√≠culo {vehicle_id}.")
                    else:
                        print(f"‚ö†Ô∏è Atributo '{key}' n√£o encontrado.")
                return
        print(f"üö´ Ve√≠culo com ID {vehicle_id} n√£o encontrado.")

    def delete_vehicle(self, vehicle_id: int):
        """
        Exclui um ve√≠culo com base no ID fornecido.

        Par√¢metros:
            vehicle_id (int): ID do ve√≠culo a ser exclu√≠do.

        Exemplo:
            manager.delete_vehicle(1)
        """
        for vehicle in self.vehicles:
            if vehicle.vehicle_id == vehicle_id:
                self.vehicles.remove(vehicle)
                print(f"üóëÔ∏è Ve√≠culo com ID {vehicle_id} removido com sucesso.")
                return
        print(f"üö´ Ve√≠culo com ID {vehicle_id} n√£o encontrado.")

# Testando a funcionalidade
#if __name__ == "__main__":

    # Criando o gerenciador de ve√≠culos
#    manager = CargoVehicleCRUD()

    # Criando um ve√≠culo para testar
#    v1 = CargoVehicle(
#        vehicle_id=1,
#        vehicle_type_id= CargoVehicleType(vehicle_type_id= 1, description= "Graneleiro", route_recommendation= "URBAN"),
#        brand="Volkswagen",
#        vehicle_description="Caminh√£o de carga leve",
#        plate="JKL5678",
#        chassis="ABCDEF12345678901",
#        model_year=datetime.now().year,
#        manufacture_year=datetime.now().year - 1,
#        cargo_capacity=8.5
#    )

    # Testando a cria√ß√£o de um ve√≠culo
#    manager.create_vehicle(v1)
    
    # Testando a leitura dos ve√≠culos cadastrados
#    manager.read_vehicles()
    
    # Testando a atualiza√ß√£o do ve√≠culo
#    manager.update_vehicle(1, brand="Iveco", cargo_capacity=10.0)
    
    # Testando a leitura novamente ap√≥s a atualiza√ß√£o
#    manager.read_vehicles()
    
    # Testando a exclus√£o do ve√≠culo
#    manager.delete_vehicle(1)
    
    # Testando a leitura ap√≥s a exclus√£o
#    manager.read_vehicles()
